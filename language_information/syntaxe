if you write an identifier with was initialize befor this became like a literal in any of the syntaxe under
a identifier is also a literal
but a literal is not a identifier
a condition is true if it's value is > 0 and flase if <= 0

instruction:
    any instruction on a ligne end with ';'

comparator:
    literal comparator literal
    literal can be char, bool, int, float, hex, bin, ptr (ptr will be converted in a int value)

    the ouput of this is a literal that is 0 or 1 / true or false

operator (=, -, +, *, /, ^, %, //, &, |, >>, <<, ++, --, ...=):
    literal operator literal
    -literal can be char, bool, int, float, hex, bin, ptr (ptr will be converted in a int value)
    
    the ouput of this is a literal

operator (!, ?, ->, <-, +, -):
    identifer+
    identifer-
    !literal
    ?literal
    <-identifier

    ->literal
    -literal need to be a ptr

    the ouput of this is a literal

identifer initialisation:
    char identifier = literal
    -litral need to be in the form of 'n' where n represent a single char

    bool identifer = literal
    -literal can be 0 or 1 or true or false

    int identifer = literal
    -literal need to be interger, a decimal can be writen but only the integer part will be used

    float identifer = literal
    -literal need to be integer or decimal

    str identifer = literal
    -literal need to be like "..." where the .. represent the content of the string
    
    hex identifer = literal
    -literal need to be 0x... and composed of 0 1 2 3 4 5 6 7 8 9 a b c d e f
    
    bin identifer = literal
    -literal need to be composed of 0 and 1

    ptr identifer = literal
    -literal need to be a positive integer
    
    array identifer = [literal, literal, literal, ...]
    -literal can be any other type of data

    array identifer[literal];
    array identifer[literal] = {literal}
    -this will create an array of the size of n -> [n] with the value -> {n} everywhere if no value given it's at the start 0

    data_type identifier;
    -this is also valid with no atribution set to 0 at the base

    struct identifier {
        initialize any data_type without valuea
        ...;
    }

delimitor:
    @this is a comment for exemple if i come back to a new line this not anymore a comment

    @>but with this i can come
    back to a new line
    like here and after this symbole i'm not anymore in a comment<@
    
    data_type identifier = literal;
    data_type
    identifier
    = literal;
    -the ';' end an instruction the both thing above are the same thing

    'i'
    -i is the char

    "i'm an exemple of str"
    -thi is an exemple of str / string

flow controler:
    if (condition)
        ...;
    
    if (condition) {
        ...;
    };

    &if (condition)
        ...;

    &if (condition) {
        ...;
    };

    elif (condition)
        ...;

    elif (condition) {
        ...;
    };

    else
        ...;

    else {
        ...;
    };
    
    for (data_type identifier = literal) (condition) (...) {
        ...;
    };
    
    for (data_type identifier = literal) (condition) {
        ...;
    };
    -you can even delete the 3 thing and it's a infinite loop like do

    do {
        ...;
    };

    break;
    continue;
    exit;

    return literal;
    -where literal can be a type
    
    error (literal_1, literal_2, literal_3);
    -literal_1 is 
    -literal_1 is 
    -literal_1 is 

key word:
    literal_1 <<< (identifier, literal_2)
    -literal_1 is a stream
    -literal_2 is a integer or float that will be cast in a integer
    -identifier is a str

    (literal_1, literal_2) >>> identifier
    -literal_1 is a stream
    -literal_2 is a integer or float that will be cast in a integer
    -identifier is a str

    set literal_1 literal_2
    -literal_1 is only a literal text like EXEMPLE
    -literal_2 is only a literal on the compilation every literal_1 in the file will be change to literal_2

    get * from "literal"
    -literal is the name of a file where the function that you need is
    -the '*' will include all the function of the file

    get [literal_1, literal_2, ...] from "literal"
    -literal is the name of a file where the function that you need is
    -you can set a list of the function that you need

    @error@ Here is an exemple of text that can be written as an error

function:
    data_type identifier(data_type identifier, ...) {
        ...;
        return ...;
    };

    none identifier(data_type identifier, ...) {
        ...;
    };

prototype:
    data_type identifier();
    none identifier();
